datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
model Subscriber {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
}

model NewsletterSubscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]


  //specific DAR 

  activities    Activity[]
  goals         TemporaryActivityDurationGoal[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

// Activity Tracking
model Activity {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  dimension   String    // Type d'activité (e.g., "meditation", "coding")
  startTime   DateTime
  endTime     DateTime
  duration    Int       // Durée en minutes
  date        DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId, date])
  @@index([userId, dimension])
}


// Temporary Activity Goals with History
model TemporaryActivityDurationGoal {
  id              String                      @id @default(cuid())
  userId          String
  user            User                       @relation(fields: [userId], references: [id])
  dimension       String                      // Type ou catégorie d'activité
  currentTarget   Int                         // Objectif actuel (en minutes)
  type            GoalType                    // MINIMUM ou MAXIMUM
  active          Boolean                     @default(true)
  history         ActivityDurationGoalHistory[]
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @updatedAt

  @@index([userId, dimension])
  @@index([userId, active])
}

model ActivityDurationGoalHistory {
  id                     String                      @id @default(cuid())
  goalId                 String
  goal                   TemporaryActivityDurationGoal @relation(fields: [goalId], references: [id])
  previousTargetMinutes  Int                         // Ancien objectif
  newTargetMinutes       Int                         // Nouvel objectif
  changedAt              DateTime                    @default(now()) // Date de modification

  @@index([goalId, changedAt])
}

// Enum for goal types
enum GoalType {
  MINIMUM
  MAXIMUM
}